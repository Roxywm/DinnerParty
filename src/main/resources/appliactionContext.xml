<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 启用注解实现AOP -->
    <aop:aspectj-autoproxy />
	<!-- 启用注解方式注入 -->
	<context:annotation-config />
	<!-- 指定扫描Bean的基本包 -->
	<context:component-scan base-package="com.roxy.maven.dinner" />
	
	<!-- 引入数据库属性文件 -->
	<!--<context:property-placeholder location="database.properties"/>-->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件 -->
		<property name="locations">
			<array>
				<value>classpath:database.properties</value>
				<value>classpath:redis.properties</value>
			</array>
		</property>
	</bean>

	<!-- 阿里巴巴Druid数据库池配置 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
		<property name="driverClassName" value="${driver}" /><!-- 数据库驱动类 -->
    	<property name="url" value="${url}" /><!-- 数据库连接url -->
    	<property name="username" value="${username}"/><!-- 数据库用户名 -->
    	<property name="password" value="${password}"/><!-- 数据库密码 -->
    	<property name="maxActive" value="20"/><!-- 最大连接数 -->
    	<property name="minIdle" value="3" /><!-- 最小连接数 -->
    	<property name="initialSize" value="1" /><!-- 初始化连接数 -->
    	<property name="maxWait" value="60000" /><!-- 最大空闲时间 -->
    	<property name="filters" value="stat" />
	</bean>
	
	<!-- Spring与Mybatis的整合 -->
	
	<!-- 配置SessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    	<property name="dataSource" ref="dataSource"/><!-- 引用上面配置的数据源dataSource -->
        <!-- 自动扫描entity目录, 省掉Mybatis配置文件里的手工配置 -->  
        <property name="mapperLocations" value="classpath:com/roxy/maven/dinner/mapper/*.xml" />
        <!-- 实体类映射别名设置 （默认把实体类的首字母小写后作为别名）-->
        <property name="typeAliasesPackage" value="com.roxy.maven.dinner.entity" />
        <!-- 引入MyBatis配置文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
    </bean>
	
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.roxy.maven.dinner.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>  
    </bean>

    <!-- (事务管理) -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
	<!-- 启用注解方式实现事务管理 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

    <!-- Druid -->
    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>com.roxy.maven.dinner.service.*</value>
                <value>com.roxy.maven.dinner.dao.*</value>
            </list>
        </property>
    </bean>

    <!-- 切入点配置 -->
    <aop:config proxy-target-class="true">
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
    </aop:config>

	<!-- Redis配置 Start-->

	<!-- 配置连接池 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxTotal" value="${redis.maxActive}" />
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>

	<!-- 配置JedisConnectionFactory -->
	<bean id="jedisConnectionFactory"
		  class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<!-- <property name="password" value="${redis.pass}" /> -->
		<property name="database" value="${redis.dbIndex}" />
		<property name="poolConfig" ref="poolConfig" />
	</bean>

	<!-- 配置RedisTemplate -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>

	<!-- 配置RedisCacheManager -->
	<bean id="redisCacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg name="redisOperations" ref="redisTemplate" />
		<property name="defaultExpiration" value="${redis.expiration}" />
	</bean>

	<!-- 配置RedisCacheConfig -->
	<bean id="redisCacheConfig" class="com.roxy.maven.dinner.util.RedisCacheConfig">
		<constructor-arg ref="jedisConnectionFactory" />
		<constructor-arg ref="redisTemplate" />
		<constructor-arg ref="redisCacheManager" />
	</bean>
	<!-- Redis配置 End-->
</beans>